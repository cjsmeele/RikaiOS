#+TITLE:  EOS-OS
#+AUTHOR: Chris Smeele

(this is a work in progress)

** Dependencies

- nasm
- lld
- llvm
- clang
- parted
- qemu (if you are running with QEMU)
- bochs (if you are running with Bochs)

** Repo structure

| *Directory*   | *Description*                      |
|---------------|------------------------------------|
| ~/boot~       | Bootloader (bootsector and stage2) |
| ~/boot/utils~ | Bootloader installer               |
| ~/kernel~     | Kernel code                        |

| *Makefile*               | *Description*                                            |
|--------------------------|----------------------------------------------------------|
| ~/Makefile~              | Builds everything, creates boot disks and runs emulators |
| ~/boot/Makefile~         | Builds bootloader and installer                          |
| ~/kernel/Makefile~       | Builds kernel                                            |

Every Makefile above includes (if available) a ~Makefile.local~ file in the
same directory. This allows you to override any toolchain executable names and
paths, and to optionally add additional targets.

** How to build / run

Do not forget to pass ~-j 4~ (or higher) to make to increase build performance
on multicore systems.

*** QEMU

This builds the kernel and bootloader and creates a boot disk that is run with
QEMU:

: make disk && make run

To enable acceleration using kvm, run:

: make disk && make qemu-kvm

*** VirtualBox

In order to run in Virtualbox, do the following:

- Make a disk using the =qcow= target:

: make qcow

Then:

- Create a diskless VM in VirtualBox.
- Go to VM settings -> System -> Acceleration
  - Check (âœ“) Enable VT-X/AMD-V and Enable Nested Paging
- Go to VM settings -> Storage
  - Remove the SATA controller, if it exists.
  - Create an IDE controller with default settings
  - Add the =disk.qcow= file as an IDE disk

Now you should be able to start the VM through virtualbox.

# in the future we should auto-generate importable vm configurations, or
# something.

*** Forcing a rebuild

This forcibly rebuilds all components, ignoring existing output files.

: make rebuild

*** Debugging

You can debug the kernel with either QEMU or Bochs:

- QEMU/gdb: Provides a familiar debugger interface with good C++ integration.
- Bochs: Provides a better low-level overview with good x86 error reporting, runs slower.

**** QEMU/gdb

See [[./src/gdbrc]] for startup options (you may override this file path in a ~Makefile.local~).

: make disk && make debug

**** Bochs

See [[./src/bochsrc]] for configuration options (you may override this file path in a ~Makefile.local~).

: make disk && make bochs

*** Troubleshooting / common errors

: ld.lld: error: unable to find library -lclang_rt.builtins-i386

1. Locate your clang's builtins library (e.g. ~locate clang_rt.builtins~)
2. Create file ~kernel/Makefile.local~, with contents:
   ~LD_BUILTIN_DIR += /the/directory/containing/the/clang/lib~
